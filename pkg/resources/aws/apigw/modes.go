package apigw

import (
	"fmt"

	"github.com/awslabs/goformation/v7/cloudformation"
	"github.com/awslabs/goformation/v7/cloudformation/apigatewayv2"
	"github.com/stefan79/gadgeto/pkg/modes"
	"github.com/stefan79/gadgeto/pkg/resources"
)

// Connect implements resources.ResourceFactory.
func (agbc *apiGatewayBuilderConfig) Connect(ctx *resources.ResourceFactoryContext) (APIGatewayClient, error) {
	return &runConf{
		mode: modes.DowncastMode[APIGatewayProxyTrigger](agbc.baseMode),
	}, nil
}

// Deploy implements resources.ResourceFactory.
func (agbc *apiGatewayBuilderConfig) Deploy(ctx *resources.ResourceFactoryContext, tmpl *cloudformation.Template, env map[string]string) (APIGatewayClient, resources.CompletionHook, error) {
	apiGWKey := ctx.GenerateAppResourceKey(resources.Api, agbc.name)
	apiGWName := ctx.GenerateAppResourceName(agbc.name)
	apiGW := &apigatewayv2.Api{
		Name: &apiGWName,
		CorsConfiguration: &apigatewayv2.Api_Cors{
			AllowHeaders: agbc.corsAllowHeaders,
			AllowMethods: agbc.corsAllowMethods,
			AllowOrigins: agbc.corsAllowOrigins,
		},
		Description:              resources.StringPtr(fmt.Sprintf("Generated by Gadget to implement the trigger for %s:%s", *ctx.ApplicationName, *ctx.CommandName)),
		ProtocolType:             resources.StringPtr("HTTP"),
		RouteSelectionExpression: agbc.routeSelectionExpression,
		Tags:                     agbc.tags,
	}
	tmpl.Resources[apiGWKey] = apiGW

	return &buildConf{
		mode:      modes.DowncastMode[APIGatewayProxyTrigger](agbc.baseMode),
		reference: cloudformation.Ref(apiGWKey),
		key:       apiGWKey,
	}, nil, nil
}
